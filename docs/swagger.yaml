openapi: 3.0.0
info:
  title: Real Estate APIs
  version: 1.0.0
  description: API documentation for Real Estate platform
servers:
  - url: SERVER_BASE_URL_PLACEHOLDER

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - userEmail
                - password
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                userEmail:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Passw0rd!
                userPhoneNumber:
                  type: string
                  example: "+123456789"
                nationalIdNumber:
                  type: string
                  example: "30303521400797"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid input or already exists

  /auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
                - password
              properties:
                userEmail:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Passw0rd!
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials

  /auth/forget-password:
    post:
      summary: Request a password reset code
      description: Sends a 6-digit reset code to the user's email if the account exists.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
              properties:
                userEmail:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Reset code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset link sent to your email check it now!
        '404':
          description: User not found
        '500':
          description: Internal server error

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset user password
      description: >
        Allows a user to reset their password using a valid reset code sent to their email.
        The reset code must match and be unexpired.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
                - resetCode
                - newPassword
              properties:
                userEmail:
                  type: string
                  format: email
                  example: user@example.com
                resetCode:
                  type: string
                  example: "123456"
                newPassword:
                  type: string
                  format: password
                  example: StrongP@ssw0rd
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired reset code
        '404':
          description: User not found

  /users/users:
    get:
      summary: Get all users
      description: Retrieve a paginated list of users with optional filters and sorting.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: email
          schema:
            type: string
            example: test@example.com
        - in: query
          name: name
          schema:
            type: string
            example: John Doe
        - in: query
          name: role
          schema:
            type: string
            example: admin
        - in: query
          name: status
          schema:
            type: string
            example: active
        - in: query
          name: sort
          schema:
            type: string
            example: "-createdAt,name"
        - in: query
          name: fields
          schema:
            type: string
            example: id,name,email
      responses:
        "200":
          description: Successful response with paginated user list
        "500":
          description: Server error

  /users/user-profile:
    get:
      summary: Get authenticated user's profile
      description: >
        Retrieves the profile details of the currently authenticated user.
        Accessible only to users with roles `SELLER`, `BUYER`, or `UN_VERIFIEDUSER`.
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile fetched successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Server error

    patch:
      summary: Update authenticated user's profile
      description: >
        Allows the authenticated user to update their profile details.  
        Accessible only to roles: `SELLER`, `BUYER`, `UN_VERIFIEDUSER`, `ADMIN`.
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                userEmail:
                  type: string
                  format: email
                  example: johndoe@example.com
              additionalProperties: false
      responses:
        '200':
          description: User profile updated successfully
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error

openapi: 3.0.0
info:
  title: Real Estate APIs
  version: 1.0.0
  description: API documentation for Real Estate platform
servers:
  - url: SERVER_BASE_URL_PLACEHOLDER

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - userEmail
                - password
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                userEmail:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Passw0rd!
                userPhoneNumber:
                  type: string
                  example: "+123456789"
                nationalIdNumber:
                  type: string
                  example: "30303521400797"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid input or already exists

  /auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
                - password
              properties:
                userEmail:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Passw0rd!
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials

  /auth/forget-password:
    post:
      summary: Request a password reset code
      description: Sends a 6-digit reset code to the user's email if the account exists.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
              properties:
                userEmail:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Reset code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset link sent to your email check it now!
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset user password
      description: >
        Allows a user to reset their password using a valid reset code sent to their email.  
        The reset code must match and be unexpired.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
                - resetCode
                - newPassword
              properties:
                userEmail:
                  type: string
                  format: email
                  example: user@example.com
                resetCode:
                  type: string
                  example: "123456"
                newPassword:
                  type: string
                  format: password
                  example: StrongP@ssw0rd
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully
        '400':
          description: Invalid or expired reset code
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid or expired reset code
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
  /users:
    get:
      summary: Get all users
      description: Retrieve a paginated list of users with optional filters and sorting.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Page number for pagination (default is 1)
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Number of results per page (default is 10)
        - in: query
          name: email
          schema:
            type: string
            example: test@example.com
          description: Filter users by email
        - in: query
          name: name
          schema:
            type: string
            example: John Doe
          description: Filter users by name
        - in: query
          name: role
          schema:
            type: string
            example: admin
          description: Filter users by role
        - in: query
          name: status
          schema:
            type: string
            example: active
          description: Filter users by status
        - in: query
          name: sort
          schema:
            type: string
            example: "-createdAt,name"
          description: Sort fields (prefix with `-` for descending, multiple fields separated by commas)
        - in: query
          name: fields
          schema:
            type: string
            example: id,name,email
          description: Comma-separated list of fields to include in the response
      responses:
        "200":
          description: Successful response with paginated user list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Users fetched successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "clx1z9y0t0001xyz123456"
                        name:
                          type: string
                          example: John Doe
                        email:
                          type: string
                          example: john@example.com
                        role:
                          type: string
                          example: admin
                        status:
                          type: string
                          example: active
                        createdAt:
                          type: string
                          format: date-time
                          example: 2025-08-10T12:34:56Z
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 100
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 10
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Server error

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]

}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPERADMIN
  SELLER
  BUYER
  UN_VERIFIEDUSER
  BLOCKED
}

enum NationalIdStatus {
  PENDING
  APPROVED
  REJECTED
}

model NationalIdValidation {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  frontImageId String @default("null")
  frontImage   File   @relation("FrontImageRelation", fields: [frontImageId], references: [id])

  backImageId String? @default("null")
  backImage   File?   @relation("BackImageRelation", fields: [backImageId], references: [id])

  nationalIdNumber String?

  status ValidationStatus @default(PENDING)
  reason String?

  createdAt  DateTime  @default(now())
  reviewedAt DateTime?
}

model File {
  id           String   @id @default(uuid())
  type         FileType
  url          String // local path or S3 URL
  originalName String
  mimeType     String
  size         Int
  createdAt    DateTime @default(now())

  frontImageUsages NationalIdValidation[] @relation("FrontImageRelation")
  backImageUsages  NationalIdValidation[] @relation("BackImageRelation")
}

enum ValidationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FileType {
  VERIFICATION
  PROPERTY
  AVATAR
  DOCUMENT
}

model User {
  id                        Int              @id @default(autoincrement())
  firstName                 String
  lastName                  String
  userEmail                 String           @unique
  userPhoneNumber           String
  nationalIdFront           String?
  nationalIdBack            String?
  nationalIdNumber          String?          @unique
  nationalIdStatus          NationalIdStatus @default(PENDING)
  nationalIdVerifiedBy      Int? // ID of admin who verified
  nationalIdVerifiedAt      DateTime? // Date/time of verification
  nationalIdRejectionReason String? // Reason if rejected
  userHashedPassword        String
  role                      Role
  resetCode                 String?
  resetCodeExpiry           DateTime?
  createdAt                 DateTime         @default(now())

  NationalIdValidation NationalIdValidation[]
}
